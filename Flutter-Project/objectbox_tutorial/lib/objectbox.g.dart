// GENERATED CODE - DO NOT MODIFY BY HAND
// This code was generated by ObjectBox. To update it run the generator again
// with `dart run build_runner build`.
// See also https://docs.objectbox.io/getting-started#generate-objectbox-code

// ignore_for_file: camel_case_types, depend_on_referenced_packages
// coverage:ignore-file

import 'dart:typed_data';

import 'package:flat_buffers/flat_buffers.dart' as fb;
import 'package:objectbox/internal.dart'
    as obx_int; // generated code can access "internal" functionality
import 'package:objectbox/objectbox.dart' as obx;
import 'package:objectbox_flutter_libs/objectbox_flutter_libs.dart';

import 'model/item_model.dart';
import 'model/order_model.dart';

export 'package:objectbox/objectbox.dart'; // so that callers only have to import this file

final _entities = <obx_int.ModelEntity>[
  obx_int.ModelEntity(
      id: const obx_int.IdUid(1, 8636965624729579419),
      name: 'ItemModel',
      lastPropertyId: const obx_int.IdUid(4, 6342736003402115033),
      flags: 2,
      properties: <obx_int.ModelProperty>[
        obx_int.ModelProperty(
            id: const obx_int.IdUid(1, 449195371705804086),
            name: 'id',
            type: 6,
            flags: 1),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(2, 8991308453275306041),
            name: 'itemName',
            type: 9,
            flags: 0),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(3, 1189432192987684113),
            name: 'itemCount',
            type: 6,
            flags: 0),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(4, 6342736003402115033),
            name: 'orderModelId',
            type: 11,
            flags: 520,
            indexId: const obx_int.IdUid(1, 3086365393477747154),
            relationTarget: 'OrderModel')
      ],
      relations: <obx_int.ModelRelation>[],
      backlinks: <obx_int.ModelBacklink>[]),
  obx_int.ModelEntity(
      id: const obx_int.IdUid(2, 6081373778750128146),
      name: 'OrderModel',
      lastPropertyId: const obx_int.IdUid(2, 1981755147619179946),
      flags: 2,
      properties: <obx_int.ModelProperty>[
        obx_int.ModelProperty(
            id: const obx_int.IdUid(1, 9051424834052602176),
            name: 'id',
            type: 6,
            flags: 1),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(2, 1981755147619179946),
            name: 'ordered',
            type: 1,
            flags: 0)
      ],
      relations: <obx_int.ModelRelation>[],
      backlinks: <obx_int.ModelBacklink>[
        obx_int.ModelBacklink(
            name: 'items', srcEntity: 'ItemModel', srcField: '')
      ])
];

/// Shortcut for [obx.Store.new] that passes [getObjectBoxModel] and for Flutter
/// apps by default a [directory] using `defaultStoreDirectory()` from the
/// ObjectBox Flutter library.
///
/// Note: for desktop apps it is recommended to specify a unique [directory].
///
/// See [obx.Store.new] for an explanation of all parameters.
///
/// For Flutter apps, also calls `loadObjectBoxLibraryAndroidCompat()` from
/// the ObjectBox Flutter library to fix loading the native ObjectBox library
/// on Android 6 and older.
Future<obx.Store> openStore(
    {String? directory,
    int? maxDBSizeInKB,
    int? maxDataSizeInKB,
    int? fileMode,
    int? maxReaders,
    bool queriesCaseSensitiveDefault = true,
    String? macosApplicationGroup}) async {
  await loadObjectBoxLibraryAndroidCompat();
  return obx.Store(getObjectBoxModel(),
      directory: directory ?? (await defaultStoreDirectory()).path,
      maxDBSizeInKB: maxDBSizeInKB,
      maxDataSizeInKB: maxDataSizeInKB,
      fileMode: fileMode,
      maxReaders: maxReaders,
      queriesCaseSensitiveDefault: queriesCaseSensitiveDefault,
      macosApplicationGroup: macosApplicationGroup);
}

/// Returns the ObjectBox model definition for this project for use with
/// [obx.Store.new].
obx_int.ModelDefinition getObjectBoxModel() {
  final model = obx_int.ModelInfo(
      entities: _entities,
      lastEntityId: const obx_int.IdUid(2, 6081373778750128146),
      lastIndexId: const obx_int.IdUid(1, 3086365393477747154),
      lastRelationId: const obx_int.IdUid(0, 0),
      lastSequenceId: const obx_int.IdUid(0, 0),
      retiredEntityUids: const [],
      retiredIndexUids: const [],
      retiredPropertyUids: const [],
      retiredRelationUids: const [],
      modelVersion: 5,
      modelVersionParserMinimum: 5,
      version: 1);

  final bindings = <Type, obx_int.EntityDefinition>{
    ItemModel: obx_int.EntityDefinition<ItemModel>(
        model: _entities[0],
        toOneRelations: (ItemModel object) => [object.orderModel],
        toManyRelations: (ItemModel object) => {},
        getId: (ItemModel object) => object.id,
        setId: (ItemModel object, int id) {
          object.id = id;
        },
        objectToFB: (ItemModel object, fb.Builder fbb) {
          final itemNameOffset = fbb.writeString(object.itemName);
          fbb.startTable(5);
          fbb.addInt64(0, object.id);
          fbb.addOffset(1, itemNameOffset);
          fbb.addInt64(2, object.itemCount);
          fbb.addInt64(3, object.orderModel.targetId);
          fbb.finish(fbb.endTable());
          return object.id;
        },
        objectFromFB: (obx.Store store, ByteData fbData) {
          final buffer = fb.BufferContext(fbData);
          final rootOffset = buffer.derefObject(0);
          final itemNameParam = const fb.StringReader(asciiOptimization: true)
              .vTableGet(buffer, rootOffset, 6, '');
          final itemCountParam =
              const fb.Int64Reader().vTableGet(buffer, rootOffset, 8, 0);
          final object = ItemModel(
              itemName: itemNameParam, itemCount: itemCountParam)
            ..id = const fb.Int64Reader().vTableGet(buffer, rootOffset, 4, 0);
          object.orderModel.targetId =
              const fb.Int64Reader().vTableGet(buffer, rootOffset, 10, 0);
          object.orderModel.attach(store);
          return object;
        }),
    OrderModel: obx_int.EntityDefinition<OrderModel>(
        model: _entities[1],
        toOneRelations: (OrderModel object) => [],
        toManyRelations: (OrderModel object) => {
              obx_int.RelInfo<ItemModel>.toOneBacklink(4, object.id,
                  (ItemModel srcObject) => srcObject.orderModel): object.items
            },
        getId: (OrderModel object) => object.id,
        setId: (OrderModel object, int id) {
          object.id = id;
        },
        objectToFB: (OrderModel object, fb.Builder fbb) {
          fbb.startTable(3);
          fbb.addInt64(0, object.id);
          fbb.addBool(1, object.ordered);
          fbb.finish(fbb.endTable());
          return object.id;
        },
        objectFromFB: (obx.Store store, ByteData fbData) {
          final buffer = fb.BufferContext(fbData);
          final rootOffset = buffer.derefObject(0);

          final object = OrderModel()
            ..id = const fb.Int64Reader().vTableGet(buffer, rootOffset, 4, 0)
            ..ordered =
                const fb.BoolReader().vTableGet(buffer, rootOffset, 6, false);
          obx_int.InternalToManyAccess.setRelInfo<OrderModel>(
              object.items,
              store,
              obx_int.RelInfo<ItemModel>.toOneBacklink(
                  4, object.id, (ItemModel srcObject) => srcObject.orderModel));
          return object;
        })
  };

  return obx_int.ModelDefinition(model, bindings);
}

/// [ItemModel] entity fields to define ObjectBox queries.
class ItemModel_ {
  /// See [ItemModel.id].
  static final id =
      obx.QueryIntegerProperty<ItemModel>(_entities[0].properties[0]);

  /// See [ItemModel.itemName].
  static final itemName =
      obx.QueryStringProperty<ItemModel>(_entities[0].properties[1]);

  /// See [ItemModel.itemCount].
  static final itemCount =
      obx.QueryIntegerProperty<ItemModel>(_entities[0].properties[2]);

  /// See [ItemModel.orderModel].
  static final orderModel =
      obx.QueryRelationToOne<ItemModel, OrderModel>(_entities[0].properties[3]);
}

/// [OrderModel] entity fields to define ObjectBox queries.
class OrderModel_ {
  /// See [OrderModel.id].
  static final id =
      obx.QueryIntegerProperty<OrderModel>(_entities[1].properties[0]);

  /// See [OrderModel.ordered].
  static final ordered =
      obx.QueryBooleanProperty<OrderModel>(_entities[1].properties[1]);

  /// see [OrderModel.items]
  static final items =
      obx.QueryBacklinkToMany<ItemModel, OrderModel>(ItemModel_.orderModel);
}
